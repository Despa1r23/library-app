import tkinter as tk
from tkinter import ttk, messagebox
from database import Database
from datetime import datetime
import platform

# –ù–∞—Å—Ç—Ä–æ–π–∫–∞ —Å—Ç–∏–ª–µ–π
def setup_styles():
    style = ttk.Style()
    
    # –°–æ–≤—Ä–µ–º–µ–Ω–Ω–∞—è —Ç–µ–º–∞
    style.theme_use('clam')
    
    # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Ü–≤–µ—Ç–∞
    style.configure('TFrame', background='#f0f8ff')
    style.configure('TLabel', background='#f0f8ff', font=('Arial', 10))
    style.configure('TButton', font=('Arial', 9), padding=6)
    style.configure('Treeview', font=('Arial', 9), rowheight=25)
    style.configure('Treeview.Heading', font=('Arial', 10, 'bold'))
    style.configure('Accent.TButton', background='#3498db', foreground='white')
    style.configure('Card.TFrame', background='#ffffff', relief='raised', borderwidth=1)
    
    return style

class LibraryApp:
    def __init__(self, root):
        self.root = root
        self.root.title("üìö –ú–æ—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞")
        
        # –ü–æ–ª—É—á–∞–µ–º —Ä–∞–∑–º–µ—Ä —ç–∫—Ä–∞–Ω–∞ –¥–ª—è Linux
        screen_width = self.root.winfo_screenwidth()
        screen_height = self.root.winfo_screenheight()
        
        # –£—Å—Ç–∞–Ω–∞–≤–ª–∏–≤–∞–µ–º —Ä–∞–∑–º–µ—Ä –æ–∫–Ω–∞ –ø–æ—á—Ç–∏ –Ω–∞ –≤–µ—Å—å —ç–∫—Ä–∞–Ω (—Å –Ω–µ–±–æ–ª—å—à–∏–º–∏ –æ—Ç—Å—Ç—É–ø–∞–º–∏)
        window_width = int(screen_width * 0.9)
        window_height = int(screen_height * 0.85)
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –æ–∫–Ω–æ
        x = (screen_width - window_width) // 2
        y = (screen_height - window_height) // 2
        
        self.root.geometry(f"{window_width}x{window_height}+{x}+{y}")
        self.root.configure(bg='#f0f8ff')
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —Å—Ç–∏–ª–∏
        self.style = setup_styles()
        
        # –ü–æ–¥–∫–ª—é—á–∞–µ–º—Å—è –∫ –±–∞–∑–µ –¥–∞–Ω–Ω—ã—Ö
        self.db = Database()
        
        # –°–æ–∑–¥–∞–µ–º –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å
        self.create_widgets()
        
        # –ó–∞–≥—Ä—É–∂–∞–µ–º –∫–Ω–∏–≥–∏
        self.load_books()
    
    def create_widgets(self):
        """–°–æ–∑–¥–∞–Ω–∏–µ —ç–ª–µ–º–µ–Ω—Ç–æ–≤ –∏–Ω—Ç–µ—Ä—Ñ–µ–π—Å–∞"""
        
        # –ì–ª–∞–≤–Ω—ã–π –∫–æ–Ω—Ç–µ–π–Ω–µ—Ä
        main_frame = ttk.Frame(self.root)
        main_frame.pack(fill=tk.BOTH, expand=True, padx=20, pady=15)
        
        # –ó–∞–≥–æ–ª–æ–≤–æ–∫
        header_frame = ttk.Frame(main_frame, padding="20")
        header_frame.pack(fill=tk.X, pady=(0, 10))
        
        title_label = ttk.Label(header_frame, 
                              text="üìñ –ú–æ—è –±–∏–±–ª–∏–æ—Ç–µ–∫–∞", 
                              font=('Arial', 20, 'bold'),
                              foreground='#2c3e50')
        title_label.pack()
        
        subtitle_label = ttk.Label(header_frame,
                                 text="–£–ø—Ä–∞–≤–ª—è–π—Ç–µ —Å–≤–æ–µ–π –∫–æ–ª–ª–µ–∫—Ü–∏–µ–π –∫–Ω–∏–≥",
                                 font=('Arial', 12),
                                 foreground='#7f8c8d')
        subtitle_label.pack()
        
        # –§—Ä–µ–π–º –¥–ª—è –¥–æ–±–∞–≤–ª–µ–Ω–∏—è –Ω–æ–≤–æ–π –∫–Ω–∏–≥–∏
        add_frame = ttk.Frame(main_frame, padding="15", style='Card.TFrame')
        add_frame.pack(fill=tk.X, pady=(0, 15))
        
        ttk.Label(add_frame, text="‚úçÔ∏è –ê–≤—Ç–æ—Ä:", font=('Arial', 10)).grid(row=0, column=0, sticky=tk.W, padx=5)
        self.author_entry = ttk.Entry(add_frame, width=30, font=('Arial', 10))
        self.author_entry.grid(row=0, column=1, padx=5)
        
        ttk.Label(add_frame, text="üìñ –ù–∞–∑–≤–∞–Ω–∏–µ:", font=('Arial', 10)).grid(row=0, column=2, sticky=tk.W, padx=20)
        self.title_entry = ttk.Entry(add_frame, width=30, font=('Arial', 10))
        self.title_entry.grid(row=0, column=3, padx=5)
        
        self.add_button = ttk.Button(add_frame, 
                                   text="‚ûï –î–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥—É", 
                                   command=self.add_book,
                                   style='Accent.TButton')
        self.add_button.grid(row=0, column=4, padx=15)
        
        # –§—Ä–µ–π–º –¥–ª—è —Å–ø–∏—Å–∫–∞ –∫–Ω–∏–≥
        list_frame = ttk.Frame(main_frame)
        list_frame.pack(fill=tk.BOTH, expand=True, pady=(0, 15))
        
        # –¢–∞–±–ª–∏—Ü–∞ –¥–ª—è –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏—è –∫–Ω–∏–≥
        columns = ("ID", "–ê–≤—Ç–æ—Ä", "–ù–∞–∑–≤–∞–Ω–∏–µ", "–°—Ç–∞—Ç—É—Å", "–î–∞—Ç–∞ –ø—Ä–æ—á—Ç–µ–Ω–∏—è", "–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è")
        self.tree = ttk.Treeview(list_frame, columns=columns, show="headings", height=20)
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º –∑–∞–≥–æ–ª–æ–≤–∫–∏
        self.tree.heading("ID", text="üìã ID")
        self.tree.heading("–ê–≤—Ç–æ—Ä", text="üë§ –ê–≤—Ç–æ—Ä")
        self.tree.heading("–ù–∞–∑–≤–∞–Ω–∏–µ", text="üìö –ù–∞–∑–≤–∞–Ω–∏–µ")
        self.tree.heading("–°—Ç–∞—Ç—É—Å", text="‚úÖ –°—Ç–∞—Ç—É—Å")
        self.tree.heading("–î–∞—Ç–∞ –ø—Ä–æ—á—Ç–µ–Ω–∏—è", text="üìÖ –î–∞—Ç–∞ –ø—Ä–æ—á—Ç–µ–Ω–∏—è")
        self.tree.heading("–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è", text="‚è∞ –î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è")
        
        # –ù–∞—Å—Ç—Ä–∞–∏–≤–∞–µ–º —à–∏—Ä–∏–Ω—É –∫–æ–ª–æ–Ω–æ–∫
        self.tree.column("ID", width=60, anchor=tk.CENTER)
        self.tree.column("–ê–≤—Ç–æ—Ä", width=200)
        self.tree.column("–ù–∞–∑–≤–∞–Ω–∏–µ", width=300)
        self.tree.column("–°—Ç–∞—Ç—É—Å", width=150, anchor=tk.CENTER)
        self.tree.column("–î–∞—Ç–∞ –ø—Ä–æ—á—Ç–µ–Ω–∏—è", width=120, anchor=tk.CENTER)
        self.tree.column("–î–∞—Ç–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∏—è", width=120, anchor=tk.CENTER)
        
        # Scrollbar –¥–ª—è —Ç–∞–±–ª–∏—Ü—ã
        scrollbar = ttk.Scrollbar(list_frame, orient=tk.VERTICAL, command=self.tree.yview)
        self.tree.configure(yscrollcommand=scrollbar.set)
        
        self.tree.pack(side=tk.LEFT, fill=tk.BOTH, expand=True)
        scrollbar.pack(side=tk.RIGHT, fill=tk.Y)
        
        # –§—Ä–µ–π–º –¥–ª—è –∫–Ω–æ–ø–æ–∫ —É–ø—Ä–∞–≤–ª–µ–Ω–∏—è
        button_frame = ttk.Frame(main_frame, padding="10")
        button_frame.pack(fill=tk.X)
        
        self.mark_read_button = ttk.Button(
            button_frame, 
            text="‚úÖ –û—Ç–º–µ—Ç–∏—Ç—å –∫–∞–∫ –ø—Ä–æ—á–∏—Ç–∞–Ω–Ω—É—é", 
            command=lambda: self.change_read_status(True),
            width=25
        )
        self.mark_read_button.pack(side=tk.LEFT, padx=5)
        
        self.mark_unread_button = ttk.Button(
            button_frame, 
            text="‚è≥ –•–æ—á—É –ø—Ä–æ—á–∏—Ç–∞—Ç—å",
            command=lambda: self.change_read_status(False),
            width=20
        )
        self.mark_unread_button.pack(side=tk.LEFT, padx=5)
        
        self.update_date_button = ttk.Button(
            button_frame, 
            text="üìÖ –ò–∑–º–µ–Ω–∏—Ç—å –¥–∞—Ç—É –ø—Ä–æ—á—Ç–µ–Ω–∏—è", 
            command=self.open_date_dialog,
            width=25
        )
        self.update_date_button.pack(side=tk.LEFT, padx=5)
        
        self.refresh_button = ttk.Button(
            button_frame, 
            text="üîÑ –û–±–Ω–æ–≤–∏—Ç—å —Å–ø–∏—Å–æ–∫", 
            command=self.load_books,
            width=20
        )
        self.refresh_button.pack(side=tk.LEFT, padx=5)
        
        # –°—Ç–∞—Ç—É—Å –±–∞—Ä
        self.status_frame = ttk.Frame(main_frame, padding="10")
        self.status_frame.pack(fill=tk.X)
        
        self.status_label = ttk.Label(self.status_frame, text="–ì–æ—Ç–æ–≤ –∫ —Ä–∞–±–æ—Ç–µ", 
                                    font=('Arial', 9), foreground='#666666')
        self.status_label.pack()
    
    def add_book(self):
        """–î–æ–±–∞–≤–ª–µ–Ω–∏–µ –Ω–æ–≤–æ–π –∫–Ω–∏–≥–∏"""
        author = self.author_entry.get().strip()
        title = self.title_entry.get().strip()
        
        if not author or not title:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ó–∞–ø–æ–ª–Ω–∏—Ç–µ –ø–æ–ª—è –∞–≤—Ç–æ—Ä–∞ –∏ –Ω–∞–∑–≤–∞–Ω–∏—è")
            return
        
        if self.db.add_book(author, title):
            messagebox.showinfo("–£—Å–ø–µ—Ö", "–ö–Ω–∏–≥–∞ –¥–æ–±–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ!")
            self.author_entry.delete(0, tk.END)
            self.title_entry.delete(0, tk.END)
            self.load_books()
            self.status_label.config(text=f"–ö–Ω–∏–≥–∞ '{title}' –¥–æ–±–∞–≤–ª–µ–Ω–∞ —É—Å–ø–µ—à–Ω–æ")
        else:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –¥–æ–±–∞–≤–∏—Ç—å –∫–Ω–∏–≥—É")
            self.status_label.config(text="–û—à–∏–±–∫–∞ –ø—Ä–∏ –¥–æ–±–∞–≤–ª–µ–Ω–∏–∏ –∫–Ω–∏–≥–∏")
    
    def load_books(self):
        """–ó–∞–≥—Ä—É–∑–∫–∞ –∏ –æ—Ç–æ–±—Ä–∞–∂–µ–Ω–∏–µ —Å–ø–∏—Å–∫–∞ –∫–Ω–∏–≥"""
        # –û—á–∏—â–∞–µ–º —Ç–∞–±–ª–∏—Ü—É
        for item in self.tree.get_children():
            self.tree.delete(item)
        
        books = self.db.get_all_books()
        for book in books:
            book_id, author, title, is_read, date_read, created_at = book
            
            status = "‚úÖ –ü—Ä–æ—á–∏—Ç–∞–Ω–∞" if is_read else "‚è≥ –•–æ—á—É –ø—Ä–æ—á–∏—Ç–∞—Ç—å"
            date_read_str = date_read.strftime("%d.%m.%Y") if date_read else ""
            created_str = created_at.strftime("%d.%m.%Y") if created_at else ""
            
            self.tree.insert("", tk.END, values=(
                book_id, author, title, status, date_read_str, created_str
            ))
        
        self.status_label.config(text=f"–ó–∞–≥—Ä—É–∂–µ–Ω–æ –∫–Ω–∏–≥: {len(books)}")
    
    def change_read_status(self, is_read):
        """–ò–∑–º–µ–Ω–µ–Ω–∏–µ —Å—Ç–∞—Ç—É—Å–∞ –ø—Ä–æ—á—Ç–µ–Ω–∏—è –∫–Ω–∏–≥–∏"""
        selected = self.tree.selection()
        if not selected:
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–∏–≥—É –∏–∑ —Å–ø–∏—Å–∫–∞")
            return
        
        item = selected[0]
        book_id = self.tree.item(item)['values'][0]
        title = self.tree.item(item)['values'][2]
        
        if self.db.mark_as_read(book_id, is_read):
            status = "–ø—Ä–æ—á–∏—Ç–∞–Ω–Ω–æ–π" if is_read else "—Ö–æ—á—É –ø—Ä–æ—á–∏—Ç–∞—Ç—å"
            messagebox.showinfo("–£—Å–ø–µ—Ö", f"–ö–Ω–∏–≥–∞ '{title}' –æ—Ç–º–µ—á–µ–Ω–∞ –∫–∞–∫ {status}")
            self.load_books()
            self.status_label.config(text=f"–°—Ç–∞—Ç—É—Å –∫–Ω–∏–≥–∏ '{title}' –∏–∑–º–µ–Ω–µ–Ω")
        else:
            messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –∏–∑–º–µ–Ω–∏—Ç—å —Å—Ç–∞—Ç—É—Å –∫–Ω–∏–≥–∏")
            self.status_label.config(text="–û—à–∏–±–∫–∞ –ø—Ä–∏ –∏–∑–º–µ–Ω–µ–Ω–∏–∏ —Å—Ç–∞—Ç—É—Å–∞")
    
    def open_date_dialog(self):
        """–û—Ç–∫—Ä—ã—Ç—å –¥–∏–∞–ª–æ–≥ –¥–ª—è –∏–∑–º–µ–Ω–µ–Ω–∏—è –¥–∞—Ç—ã –ø—Ä–æ—á—Ç–µ–Ω–∏—è"""
        selected = self.tree.selection()
        if not selected:
            messagebox.showwarning("–í–Ω–∏–º–∞–Ω–∏–µ", "–í—ã–±–µ—Ä–∏—Ç–µ –∫–Ω–∏–≥—É –∏–∑ —Å–ø–∏—Å–∫–∞")
            return
        
        item = selected[0]
        book_id = self.tree.item(item)['values'][0]
        author = self.tree.item(item)['values'][1]
        title = self.tree.item(item)['values'][2]
        
        # –°–æ–∑–¥–∞–µ–º –¥–∏–∞–ª–æ–≥–æ–≤–æ–µ –æ–∫–Ω–æ
        dialog = tk.Toplevel(self.root)
        dialog.title("–ò–∑–º–µ–Ω–µ–Ω–∏–µ –¥–∞—Ç—ã –ø—Ä–æ—á—Ç–µ–Ω–∏—è")
        dialog.geometry("400x200")
        dialog.configure(bg='#f0f8ff')
        dialog.transient(self.root)
        dialog.grab_set()
        
        # –¶–µ–Ω—Ç—Ä–∏—Ä—É–µ–º –¥–∏–∞–ª–æ–≥
        dialog.update_idletasks()
        x = (dialog.winfo_screenwidth() - dialog.winfo_width()) // 2
        y = (dialog.winfo_screenheight() - dialog.winfo_height()) // 2
        dialog.geometry(f"+{x}+{y}")
        
        ttk.Label(dialog, text=f"üìö –ö–Ω–∏–≥–∞: {author}", 
                 font=('Arial', 11, 'bold')).pack(pady=10)
        ttk.Label(dialog, text=f"'{title}'", 
                 font=('Arial', 10)).pack(pady=2)
        ttk.Label(dialog, text="üìÖ –ù–æ–≤–∞—è –¥–∞—Ç–∞ –ø—Ä–æ—á—Ç–µ–Ω–∏—è (–ì–ì–ì–ì-–ú–ú-–î–î):", 
                 font=('Arial', 10)).pack(pady=8)
        
        # –ü–æ–ª–µ –¥–ª—è –≤–≤–æ–¥–∞ –¥–∞—Ç—ã
        date_entry = ttk.Entry(dialog, font=('Arial', 10), width=15, justify=tk.CENTER)
        date_entry.pack(pady=5)
        date_entry.insert(0, datetime.now().strftime("%Y-%m-%d"))
        
        # –§—Ä–µ–π–º –¥–ª—è –∫–Ω–æ–ø–æ–∫
        button_frame = ttk.Frame(dialog)
        button_frame.pack(pady=10)
        
        def apply_date():
            new_date = date_entry.get().strip()
            if not new_date:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–í–≤–µ–¥–∏—Ç–µ –¥–∞—Ç—É")
                return
            
            try:
                datetime.strptime(new_date, "%Y-%m-%d")
            except ValueError:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ–≤–µ—Ä–Ω—ã–π —Ñ–æ—Ä–º–∞—Ç –¥–∞—Ç—ã. –ò—Å–ø–æ–ª—å–∑—É–π—Ç–µ –ì–ì–ì–ì-–ú–ú-–î–î\n–ù–∞–ø—Ä–∏–º–µ—Ä: 2025-08-25")
                return
            
            if self.db.update_read_date(book_id, new_date):
                messagebox.showinfo("–£—Å–ø–µ—Ö", "–î–∞—Ç–∞ –ø—Ä–æ—á—Ç–µ–Ω–∏—è –æ–±–Ω–æ–≤–ª–µ–Ω–∞!")
                dialog.destroy()
                self.load_books()
                self.status_label.config(text=f"–î–∞—Ç–∞ –ø—Ä–æ—á—Ç–µ–Ω–∏—è –∫–Ω–∏–≥–∏ '{title}' –æ–±–Ω–æ–≤–ª–µ–Ω–∞")
            else:
                messagebox.showerror("–û—à–∏–±–∫–∞", "–ù–µ —É–¥–∞–ª–æ—Å—å –æ–±–Ω–æ–≤–∏—Ç—å –¥–∞—Ç—É")
        
        ttk.Button(button_frame, text="üíæ –ü—Ä–∏–º–µ–Ω–∏—Ç—å", command=apply_date, width=12).pack(side=tk.LEFT, padx=5)
        ttk.Button(button_frame, text="‚ùå –û—Ç–º–µ–Ω–∞", command=dialog.destroy, width=12).pack(side=tk.LEFT, padx=5)
        
        date_entry.focus()
        date_entry.select_range(0, tk.END)
    
    def __del__(self):
        """–ó–∞–∫—Ä—ã–≤–∞–µ–º —Å–æ–µ–¥–∏–Ω–µ–Ω–∏–µ —Å –ë–î –ø—Ä–∏ –∑–∞–∫—Ä—ã—Ç–∏–∏ –ø—Ä–∏–ª–æ–∂–µ–Ω–∏—è"""
        if hasattr(self, 'db'):
            self.db.close()

def main():
    root = tk.Tk()
    app = LibraryApp(root)
    root.mainloop()

if __name__ == "__main__":
    main()
